# -*- coding: utf-8 -*-
"""L0_Marcos_Wilson.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xxUrJKMDCSQGogerztTmW8E09fM1sbrA

# LISTA DE EXERCÍCIO L0 - 'Hello, World!'

Como é tradicional para uma nova linguagem de programação, temos de ser capazes de criar um código que imprime os dizeres "Hello, world!" na tela. A linha de código `print("Hellow, world!")` faz exatamente isto.

Faça um teste na caixa de código abaixo:
"""

print("Hellow, world!")

"""# Exercício
Realizem as seguintes tarefas para treinarem os conhecimentos de programação recem adquiridos.

---
## Exercício 1 
Escreva um programa para encontrar as raizes reais de um polinômio de segundo grau dado.
"""

# dados os seguintes valores
a = 3
b = 4
c = 5
# encontre as raízes reais de a x**2 + b x + c = 0

import math

def raiz(A, B, C):
  DELTA = (B**2)-4*A*C
  x1 = (-B+(DELTA**0.5))/(2*A)
  x2 = (-B-(DELTA**0.5))/(2*A)

  print('x1 = ', x1)
  print('x2= ', x2)

raiz(a, b, c)

"""---
## Exercício 2
Escreva um programa para encontrar a soma dos *n* primeiros números naturais.
"""

# encontre a soma dos naturais de 1 até n
n = 8

x=0
i=0
  
while i<n:
  i=i+1
  x=x+i

print('Soma até n= ',x)

#Função soman 

def soman(Numeros):
  x=0
  i=0
  
  while i<Numeros:
    i=i+1
    x=x+i

  print('Soma até n= ',x)

###################################

soman(15)

"""---
## Exercício 3
A série de Fibonacci (https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci) é uma sequência de números inteiros, começando normalmente por 0 e 1, na qual cada termo subsequente corresponde à soma dos dois anteriores.
Escreva um programa para imprimir os *n* primeiros números de uma série de Fibonacci.
"""

# inicio da Série de Fibonacci
Fib = [0,1]
# Construa a Série de Fibonacci até o *n*-essimo termo.
n=10

def serieFib(N): 

  i=2
  for i in range (N-2):
    x= Fib[i] + Fib[i+1]  
    Fib.append(x)

  print(Fib)

serieFib(n)

"""---
## Exercício 4
Dado um número aleatório $x \in [0, 1]$, verifique se ele está nos intervalos de um terço, ou seja, se $0x \leq x < 1/3$ ou $1/3 \leq x < 2/3$ ou $1/3 \leq x \leq 1$. E imprima o resultado.

"""

import numpy as np
x = np.random.rand(1)
x = x[0]
print(x)

if 0 <= x < (1/3):
  print('x está no primeiro terço')

if (1/3) <= x < (2/3):
  print('x está no segundo terço')

else:
  print('x está no terceiro terço')

"""## Exercício 5
 Uma forma interessante de determinar a raiz quadrada de dois é iniciar por um valor real positivo e efetuar o processo iterativo seguindo a seguinte expressão iterativa.

 $$ x_{n+1} = \frac{1}{2} x_{n} + \frac{1}{x_{n}} $$

 até que vc alcançe a solução da raiz quadrada de dois ($\sqrt{2}$) com uma tolerância qualquer desejada.
 
 Esqueva um programa que defina a sequência iterativa $x_{n+1}$ como uma função e então efetue um loop iterativo até que a precisão seja de $10^{-8}$ com relação a $\sqrt{2}$.



"""

from math import sqrt
def f(x):
  y = 0.5*x+(1/x)  #escreva a função iterativa
  return y



# dado um valor inicial
x = 1.0

#loop interativo

while abs(x-sqrt(2)) > 10**(-8):
  x = f(x)

  print('x aproximado= ',x,'  ','x exato= ',sqrt(2),'  ','Erro Absoluto= ',x-sqrt(2))